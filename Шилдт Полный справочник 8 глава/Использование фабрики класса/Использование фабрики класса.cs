/*  Одним из применений классовых типов значений, возвращаемых методами, является
генератор объектов класса, или фабрика класса (class factory). “Фабрика” класса — это
метод, который используется для построения объектов заданного класса.
В определенных случаях пользователям некоторого класса нежелательно предоставлять доступ
к конструктору этого класса из соображений безопасности или по причине того, что создание
объектов зависит от неких внешних факторов. В таких случаях для построения объектов и
используется “фабрика” класса.*/

// Использование "фабрики" класса.
using System;
class MyClass
{
    int a, b; // закрытые члены
    // Создаем "фабрику" класса для класса MyClass.
    public MyClass factory(int i, int j)
    {
        MyClass t = new MyClass();
        t.a = i;
        t.b = j;
        return t; // Метод возвращает объект.
    }
    public void show()
    {
        Console.WriteLine("а и b: " + a + " " + b);
    }
}

/*  В классе MyClass конструктор не определен, поэтому доступен только конструктор,
 создаваемый средствами C# по умолчанию. Следовательно, установить значения членов
 класса а и b с помощью конструктора невозможно. Однако создавать объекты с заданными
 значениями членов а и b способна “фабрика” класса, реализованная в виде метода factory().
 Более того,поскольку члены а и b закрыты, использование метода factory() — единственный
 способ установки этих значений.
 В функции Main() создается объект ob класса MyClass, а затем в цикле for
 создается еще десять объектов.*/

class MakeObjects
{
    public static void Main()
    {
        MyClass ob = new MyClass();
        int i, j;
        // Генерируем объекты с помощью "фабрики" класса.
        for (i = 0, j = 10; i < 10; i++, j--)
        {
            MyClass anotherOb = ob.factory(i, j); // Создаем объект.
            anotherOb.show();
        }
        Console.WriteLine();
    }
}

/*    В функции Main() создается объект ob класса MyClass, а затем в цикле for
создается еще десять объектов. Приведем здесь строку кода, которая представляет собой
основной “конвейер” объектов.
MyClass anotherOb = ob.factory(i, j); // создаем объект
На каждой итерации цикла создается ссылочная переменная anotherOb, которой
присваивается ссылка на объект, сгенерированный “фабрикой” объектов. В конце каждой
итерации цикла ссылочная переменная anotherOb выходит из области видимости, и
объект, на который она ссылалась, утилизируется.*/